[{"/Users/karansingh/Desktop/divami-assign/src/index.js":"1","/Users/karansingh/Desktop/divami-assign/src/App.js":"2","/Users/karansingh/Desktop/divami-assign/src/components/progressBar.js":"3","/Users/karansingh/Desktop/divami-assign/src/components/donutChart.js":"4"},{"size":254,"mtime":1657264728773,"results":"5","hashOfConfig":"6"},{"size":986,"mtime":1657276963245,"results":"7","hashOfConfig":"6"},{"size":1073,"mtime":1657276935951,"results":"8","hashOfConfig":"6"},{"size":2108,"mtime":1657277596117,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ol1dtl",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/karansingh/Desktop/divami-assign/src/index.js",[],[],"/Users/karansingh/Desktop/divami-assign/src/App.js",["25"],[],"import \"./App.css\";\nimport ProgressBar from \"./components/progressBar\";\nimport DonutChart from \"./components/donutChart\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const array = [90, 50, 40, 10]; //progress bar values\n\n  // data for donut graph\n  //data.name can be rearranged but the string should be the same\n  const data = [\n    { name: \"75 - 100%\", value: 10 },\n    { name: \"50% - 75%\", value: 20 },\n    { name: \"25% - 50%\", value: 10 },\n    { name: \"0% - 25%\", value: 10 },\n  ];\n\n  return (\n    <div className=\"App\">\n      {/* Progress Bars mapped */}\n      <div className=\"containerOne\">\n        {array.map((item, index) => {\n          return (\n            <div key={index} className=\"temp_items\">\n              <ProgressBar key={index} value={item} />\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Donut Chart */}\n      <div className=\"containerTwo\">\n        <DonutChart data={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/karansingh/Desktop/divami-assign/src/components/progressBar.js",["26","27"],[],"import \"./progressBar.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction ProgressBar(props) {\n  const [number, setNumber] = useState(props.value);\n  const [range, setRange] = useState({});\n\n  const percentRange = (value) => {\n    if (value < 25) return { span: \"0% - 25%\", color: \"#EE887E\" };\n    else if (value >= 25 && value < 50)\n      return { span: \"25% - 50%\", color: \"#F1CF7E\" };\n    else if (value >= 50 && value < 75)\n      return { span: \"50% - 75%\", color: \"#7BBFE8\" };\n    else if (value >= 75 && value <= 100)\n      return { span: \"75% - 100%\", color: \"#5AC380\" };\n  };\n\n  useEffect(() => {\n    setRange(percentRange(number));\n  }, []);\n\n  return (\n    <div className=\"progressBar_container\">\n      <div className=\"progressBar_header\">\n        <div>{range.span}</div>\n        <div>{number}</div>\n      </div>\n      <div className=\"progressBar\">\n        <div\n          className=\"progressFiller\"\n          style={{ width: `${number}%`, background: `${range.color}` }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressBar;\n","/Users/karansingh/Desktop/divami-assign/src/components/donutChart.js",["28","29"],[],"import \"./donutChart.css\";\nimport React from \"react\";\nimport { PieChart, Pie, Sector, Cell, ResponsiveContainer } from \"recharts\";\n\nconst setColors = (item) => {\n  if (item.name === \"0% - 25%\") return \"#F2A71E\";\n  else if (item.name === \"25% - 50%\") return \"#5AC380\";\n  else if (item.name === \"50% - 75%\") return \"#4DA1FF\";\n  else if (item.name === \"75 - 100%\") return \"#BFBFD0\";\n};\n\nexport default function DonutChart({ data }) {\n  //sum of all the values\n  const totalResumes = (data) => {\n    return data.reduce(function (acc, data) {\n      return acc + data.value;\n    }, 0);\n  };\n\n  return (\n    <div className=\"donutChart_container\">\n      <PieChart width={182} height={182}>\n        {/* text inside donut graph */}\n        <text\n          className=\"center_text\"\n          x={91}\n          y={80}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n        >\n          {totalResumes(data)}\n        </text>\n        <text\n          className=\"center_text_lower\"\n          x={91}\n          y={110}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n        >\n          Resume Matches\n        </text>\n        <Pie\n          data={data}\n          innerRadius={\"90%\"}\n          outerRadius={\"100%\"}\n          fill=\"#8884d8\"\n          paddingAngle={1}\n          dataKey=\"value\"\n          isAnimationActive={false}\n        >\n          {data.map((item, index) => (\n            <Cell key={`cell-${index}`} fill={setColors(item)} />\n          ))}\n        </Pie>\n      </PieChart>\n\n      <div className=\"donutChart_label\">\n        {data.map((item, index) => {\n          return (\n            <div key={item.name} className=\"label_item\">\n              <div\n                className=\"label_color\"\n                style={{ backgroundColor: `${setColors(item)}` }}\n              ></div>\n              <div className=\"label_name\">\n                <spam style={{ fontSize: \"1.125em\", fontWeight: 400 }}>\n                  {item.value} |{\" \"}\n                </spam>\n                {item.name}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"30","severity":1,"message":"31","line":4,"column":17,"nodeType":"32","messageId":"33","endLine":4,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":5,"column":18,"nodeType":"32","messageId":"33","endLine":5,"endColumn":27},{"ruleId":"35","severity":1,"message":"36","line":20,"column":6,"nodeType":"37","endLine":20,"endColumn":8,"suggestions":"38"},{"ruleId":"30","severity":1,"message":"39","line":3,"column":25,"nodeType":"32","messageId":"33","endLine":3,"endColumn":31},{"ruleId":"30","severity":1,"message":"40","line":3,"column":39,"nodeType":"32","messageId":"33","endLine":3,"endColumn":58},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setNumber' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'number'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setRange' needs the current value of 'number'.","ArrayExpression",["41"],"'Sector' is defined but never used.","'ResponsiveContainer' is defined but never used.",{"desc":"42","fix":"43"},"Update the dependencies array to be: [number]",{"range":"44","text":"45"},[662,664],"[number]"]